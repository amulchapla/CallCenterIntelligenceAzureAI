{"version":3,"sources":["authConfig.js","components/SignInButton.jsx","components/SignOutButton.jsx","components/PageLayout.jsx","components/OutputWindows.jsx","token_util.js","components/Dashboard.jsx","components/Profile.jsx","App.jsx","styles/theme.js","index.js"],"names":["ua","window","navigator","userAgent","msie","indexOf","msie11","isIE","isEdge","isFirefox","msalConfig","auth","clientId","process","authority","redirectUri","postLogoutRedirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","SignInButton","instance","useMsal","DropdownButton","variant","className","drop","title","Dropdown","Item","as","onClick","loginType","loginPopup","catch","e","log","loginRedirect","SignOutButton","logoutType","logoutPopup","mainWindowRedirectUri","logoutRedirect","PageLayout","props","isAuthenticated","useIsAuthenticated","isHosted","DesktopLayout","children","HostedLayout","Container","fluid","Navbar","bg","Brand","Layout","OutputWindows","Row","Col","Card","border","style","height","Body","Header","Text","profile","dashboard","text","nlpOutput","debugData","BACKEND_API","getTokenOrRefresh","accessToken","a","cookie","Cookie","undefined","speechToken","get","headers","axios","res","token","data","region","endpoint_id","set","maxAge","path","authToken","response","idx","slice","getKeyPhrases","requestText","transcript","post","keyPhrasesExtracted","entityExtracted","Dashboard","record_status","verb","accounts","useState","setAccessToken","AudioEnabled","button_message","button_variant","isStreaming","useEffect","onMicRecordClick","Button","onToggleClick","request","account","acquireTokenSilent","then","acquireTokenPopup","RequestAccessToken","ProfileContent","name","speechsdk","require","App","handleAudioRecordingSwitch","state","AudioRecordingEnabled","setState","handleMicRecorderClick","bind","color","value","displayText","displayNLPOutput","debugConsole","this","delay","ms","Promise","setTimeout","InitializeStream","recognizer","sttFromMic","stopMicStream","tokenObj","customSpeechEndpoint","speechConfig","SpeechConfig","fromAuthorizationToken","endpointId","setServiceProperty","ServicePropertyChannel","UriQueryParameter","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","SpeechRecognizer","stopContinuousRecognitionAsync","resultText","nlpText","sessionStarted","s","sessionId","recognized","result","reason","ResultReason","RecognizedSpeech","nlpObj","keyPhraseText","JSON","stringify","length","entityText","replace","NoMatch","startContinuousRecognitionAsync","processAccessToken","Component","theme","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","msalInstance","PublicClientApplication","getActiveAccount","getAllAccounts","setActiveAccount","enableAccountStorageEvents","addEventCallback","event","eventType","EventType","LOGIN_SUCCESS","payload","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a03b50d2.chunk.js","sourcesContent":["import { LogLevel } from \"@azure/msal-browser\";\r\n// Browser check variables\r\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\r\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\r\nconst ua = window.navigator.userAgent;\r\nconst msie = ua.indexOf(\"MSIE \");\r\nconst msie11 = ua.indexOf(\"Trident/\");\r\nconst msedge = ua.indexOf(\"Edge/\");\r\nconst firefox = ua.indexOf(\"Firefox\");\r\nconst isIE = msie > 0 || msie11 > 0;\r\nconst isEdge = msedge > 0;\r\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\r\n\r\n// Config object to be passed to Msal on creation\r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: process.env.REACT_APP_CLIENT_ID,\r\n        authority: `https://login.microsoftonline.com/${process.env.REACT_APP_TENANT_ID}`,\r\n        redirectUri: process.env.REACT_APP_REDIRECT_URI,\r\n        postLogoutRedirectUri: process.env.REACT_APP_POST_LOGOUT_REDIRECT_URI\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\r\n    },\r\n    system: {\r\n        loggerOptions: {\r\n            loggerCallback: (level, message, containsPii) => {\r\n                if (containsPii) {\t\r\n                    return;\t\r\n                }\r\n                switch (level) {\t\r\n                    case LogLevel.Error:\t\r\n                        console.error(message);\t\r\n                        return;\t\r\n                    case LogLevel.Info:\t\r\n                        console.info(message);\t\r\n                        return;\t\r\n                    case LogLevel.Verbose:\t\r\n                        console.debug(message);\t\r\n                        return;\t\r\n                    case LogLevel.Warning:\t\r\n                        console.warn(message);\t\r\n                        return;\t\r\n                    default:\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n    scopes: [\"User.Read\"]\r\n};\r\n\r\n// Add here the endpoints for MS Graph API services you would like to use.\r\nexport const graphConfig = {\r\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\r\n};","import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from \"../authConfig\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/esm/Dropdown\";\r\n\r\n/**\r\n * Renders a drop down button with child buttons for logging in with a popup or redirect\r\n */\r\nexport const SignInButton = () => {\r\n    const { instance } = useMsal();\r\n\r\n    const handleLogin = (loginType) => {\r\n        if (loginType === \"popup\") {\r\n            instance.loginPopup(loginRequest).catch(e => {\r\n                console.log(e);\r\n            });\r\n        } else if (loginType === \"redirect\") {\r\n            instance.loginRedirect(loginRequest).catch(e => {\r\n                console.log(e);\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\r\n            {/* <Dropdown.Item as=\"button\" onClick={() => handleLogin(\"popup\")}>Sign in using Popup</Dropdown.Item> */}\r\n            <Dropdown.Item as=\"button\" onClick={() => handleLogin(\"redirect\")}>Sign in using Redirect</Dropdown.Item>\r\n        </DropdownButton>\r\n    )\r\n}","import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/esm/Dropdown\";\r\n\r\n/**\r\n * Renders a sign-out button\r\n */\r\nexport const SignOutButton = () => {\r\n    const { instance } = useMsal();\r\n\r\n    const handleLogout = (logoutType) => {\r\n        if (logoutType === \"popup\") {\r\n            instance.logoutPopup({\r\n                postLogoutRedirectUri: \"/\",\r\n                mainWindowRedirectUri: \"/\"\r\n            });\r\n        } else if (logoutType === \"redirect\") {\r\n            instance.logoutRedirect({\r\n                postLogoutRedirectUri: \"/\",\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\r\n            {/* <Dropdown.Item as=\"button\" onClick={() => handleLogout(\"popup\")}>Sign out using Popup</Dropdown.Item> */}\r\n            <Dropdown.Item as=\"button\" onClick={() => handleLogout(\"redirect\")}>Sign out using Redirect</Dropdown.Item>\r\n        </DropdownButton>\r\n    )\r\n}","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nimport { SignInButton } from \"./SignInButton\";\r\nimport { SignOutButton } from \"./SignOutButton\";\r\nimport { Container } from \"reactstrap\";\r\n// import { ConsoleLoggingListener } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener\";\r\n\r\n/**\r\n * Renders the navbar component with a sign-in or sign-out button depending on whether or not a user is authenticated\r\n * @param props \r\n */\r\nexport const PageLayout = (props) => {\r\n    const isAuthenticated = useIsAuthenticated();\r\n    const { REACT_APP_PLATFORM } = process.env;\r\n\r\n    if (REACT_APP_PLATFORM === \"hosted\") {\r\n        var isHosted = true;\r\n    } else {\r\n        var isHosted = false;\r\n    }\r\n\r\n    function DesktopLayout() {\r\n        return <>{props.children}</>;\r\n    }\r\n\r\n    function HostedLayout() {\r\n        \r\n        return (\r\n            <>\r\n            <Container fluid>\r\n            { isHosted ? <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>AI-Powered Call Center</Navbar.Brand>\r\n                { isAuthenticated ? <SignOutButton /> : <SignInButton /> }\r\n            </Navbar> : <p></p>}\r\n            <br />\r\n            </Container>\r\n            { isAuthenticated ? <>{props.children}</> : <p></p> }\r\n            </>\r\n        )\r\n    }\r\n\r\n    function Layout() {\r\n\r\n        if (isHosted) {\r\n            return <HostedLayout />\r\n        } else {\r\n            return <DesktopLayout />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Layout />\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport const OutputWindows = (props) => {\r\n    return (\r\n      <Container fluid>\r\n      <Row>\r\n        <Col>\r\n          <Card bg=\"secondary\" border=\"primary\" style={{ height: '275px'}}>\r\n            <Card.Body>\r\n            <Card.Header>Profile:</Card.Header>\r\n            <Card.Text>{props.profile}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col>\r\n          <Card bg=\"secondary\" border=\"primary\" style={{ height: '275px'}}>\r\n            <Card.Body>\r\n            <Card.Header>Dashboard</Card.Header>\r\n            <Card.Text>{props.dashboard}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col>\r\n        <Card text=\"success\" bg=\"dark\" border=\"primary\" style={{ height: '600px'}}>\r\n          <Card.Body>\r\n          <Card.Header>Transcription Output Window:</Card.Header>\r\n          <Card.Text>{props.text}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        </Col>\r\n        <Col>\r\n        <Card text=\"success\" bg=\"dark\" border=\"primary\" style={{ height: '600px'}}>\r\n          <Card.Body>\r\n          <Card.Header>NLP Output Window:</Card.Header>\r\n          <Card.Text>{props.nlpOutput}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n        <Card text=\"success\" bg=\"dark\" border=\"danger\" style={{ height: '200px' }}>\r\n          <Card.Body>\r\n          <Card.Header>Debug Console Window:</Card.Header>\r\n          <Card.Text>{props.debugData}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        </Col>\r\n       </Row>\r\n      </Container>\r\n    );\r\n};","import axios from 'axios';\r\nimport Cookie from 'universal-cookie';\r\nconst BACKEND_API = process.env.REACT_APP_BACKEND_API\r\n\r\nexport async function getTokenOrRefresh(accessToken) {\r\n    const cookie = new Cookie();\r\n    const speechToken = cookie.get('speech-token');\r\n    \r\n\r\n    if (speechToken === undefined) {\r\n        try {\r\n\r\n            console.log('Try getting token from the express backend');\r\n            const headers = {'Content-Type': 'application/json', 'Authorization': `Bearer ${accessToken}`, 'Access-Control-Allow-Origin': '*'}\r\n            console.log(headers)\r\n            const res = await axios.get(BACKEND_API + '/api/get-speech-token', {headers});\r\n            const token = res.data.token;\r\n            const region = res.data.region;\r\n            const endpoint_id = res.data.endpoint_id\r\n            cookie.set('speech-token', region + ':' + token, {maxAge: 540, path: '/'});\r\n\r\n            console.log('Token fetched from back-end: ' + token);\r\n            return { authToken: token, region: region, endpoint_id: endpoint_id };\r\n        } catch (err) {\r\n            console.log(err.response.data);\r\n            return { authToken: null, error: err.response.data };\r\n        }\r\n    } else {\r\n        console.log('Token fetched from cookie: ' + speechToken);\r\n        const idx = speechToken.indexOf(':');\r\n        return { authToken: speechToken.slice(idx + 1), region: speechToken.slice(0, idx) };\r\n    }\r\n}\r\n\r\nexport async function getKeyPhrases(requestText, accessToken) {     \r\n    try{\r\n        //Key Phrase extraction\r\n        const data = {transcript: requestText};\r\n        const headers = { 'Content-Type': 'application/json', 'Authorization': `Bearer ${accessToken}`};\r\n        const res = await axios.post(BACKEND_API + '/api/ta-key-phrases', data, {headers});                \r\n        \r\n        return res.data;\r\n        //return {keyPhrasesExtracted: keyPhrasesExtracted};\r\n    } catch (err) {       \r\n        return {keyPhrasesExtracted: \"NoKP\", entityExtracted: \"NoEnt\"};\r\n    }\r\n\r\n}\r\n\r\nexport async function getKeyPhrasesOld(requestText, accessToken) {      \r\n\r\n    try{\r\n        //Key Phrase extraction\r\n        const data = {transcript: requestText};\r\n        const headers = { 'Content-Type': 'application/json', 'Authorization': `Bearer ${accessToken}`};\r\n        \r\n        const res = await axios.post('/api/ta-key-phrases', data, {headers});    \r\n        //const keyPhrasesExtracted = JSON.stringify(res.body.keyPhraseResponse);        \r\n        \r\n        return res.data;\r\n        //return {keyPhrasesExtracted: keyPhrasesExtracted};\r\n    } catch (err) {       \r\n        return {keyPhrasesExtracted: \"None\"};\r\n    }\r\n}","import Button from 'react-bootstrap/Button';\r\nimport { loginRequest } from \"../authConfig\";\r\nimport { useMsal} from \"@azure/msal-react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const Dashboard = (props) => {\r\n    let record_status = \"enabled.\"\r\n    let verb = \"enable\"\r\n    const { instance, accounts } = useMsal();\r\n    const [accessToken, setAccessToken] = useState(null);\r\n\r\n    if (props.AudioEnabled) {\r\n        record_status = \"enabled.\"\r\n        verb = \"disable\"\r\n    } else {\r\n        record_status = \"disabled.\"\r\n        verb = \"enable\"\r\n    }\r\n\r\n    let message = \"Click here to \" + verb + \".\"\r\n    let button_message = \"Start Mic Streaming\"\r\n    let button_variant = \"primary\"\r\n    if (props.isStreaming) {\r\n        button_message = \"Stop Mic Streaming\"\r\n        button_variant = \"danger\"\r\n    } else {\r\n        button_message = \"Start Mic Streaming\"\r\n        button_variant = \"primary\"\r\n    }\r\n\r\n    function RequestAccessToken() {\r\n        const request = {\r\n            ...loginRequest,\r\n            account: accounts[0],\r\n            scopes: [ \"api://6798e375-a31f-48b0-abcb-87f06d70d0b6/user_impersonation\" ]\r\n        };\r\n        //silently acquire an access token\r\n        instance.acquireTokenSilent(request).then((response) => {\r\n            setAccessToken(response.accessToken);\r\n        }).catch((e) => {\r\n            instance.acquireTokenPopup(request).then((response) => {\r\n                setAccessToken(response.accessToken);\r\n            });\r\n        });\r\n    }\r\n\r\n    function ClickHandler() {\r\n        if (process.env.REACT_APP_PLATFORM === \"hosted\") {\r\n        RequestAccessToken()\r\n        } else {\r\n            setAccessToken(\"fake_token\")\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (accessToken) {\r\n            props.onMicRecordClick(accessToken)\r\n        } \r\n    }, [accessToken])\r\n\r\n    return(\r\n        <>\r\n            <table>\r\n                <tr height=\"100\">\r\n                    <td><strong>Audio Recording is {record_status}</strong></td>\r\n                    <td><Button onClick={props.onToggleClick}>{message}</Button></td>\r\n                </tr>\r\n                <tr height=\"100\">\r\n                    <td><strong>Start Or Stop Streaming</strong></td>\r\n                    <td><Button variant={button_variant} onClick={ClickHandler}>{button_message}</Button></td>\r\n                </tr>\r\n            </table>\r\n        </>\r\n    )\r\n};","import { useMsal} from \"@azure/msal-react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { loginRequest } from \"../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const ProfileContent = (props) => {\r\n    const { instance, accounts } = useMsal();\r\n    const [accessToken, setAccessToken] = useState(null);\r\n    const { REACT_APP_PLATFORM } = process.env;\r\n\r\n    if (REACT_APP_PLATFORM === \"hosted\") {\r\n        var isHosted = true;\r\n    } else {\r\n        var isHosted = false;\r\n    }\r\n\r\n    function RequestAccessToken() {\r\n        const request = {\r\n            ...loginRequest,\r\n            account: accounts[0]\r\n        };\r\n        //silently acquire an access token\r\n        instance.acquireTokenSilent(request).then((response) => {\r\n            setAccessToken(response.accessToken);\r\n        }).catch((e) => {\r\n            instance.acquireTokenPopup(request).then((response) => {\r\n                setAccessToken(response.accessToken);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n\r\n    if (isHosted) {\r\n        return (\r\n            <>\r\n                <table>\r\n                  <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\r\n                  {accessToken ? \r\n                    <p>Access Token Acquired!</p>\r\n                    :\r\n                    <Button variant=\"secondary\" onClick={RequestAccessToken}>Request Access Token</Button>\r\n                    }\r\n                </table>\r\n            </>\r\n        );\r\n        } else {\r\n            return (\r\n            <>\r\n                <table>\r\n                    <h5 className=\"card-title\">Welcome, Demo User!</h5>\r\n                </table>\r\n            </>\r\n            )\r\n        }\r\n  };","import React, { Component } from 'react';\r\nimport { loginRequest } from \"./authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useMsal} from \"@azure/msal-react\";\r\nimport { AuthenticatedTemplate, UnauthenticatedTemplate } from \"@azure/msal-react\";\r\nimport { PageLayout } from \"./components/PageLayout\";\r\nimport { OutputWindows } from \"./components/OutputWindows\";\r\nimport { getKeyPhrases, getTokenOrRefresh } from './token_util.js';\r\nimport { ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\r\nimport { Dashboard } from \"./components/Dashboard.jsx\";\r\n// import { ConsoleLoggingListener } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener';\r\nimport { ProfileContent } from \"./components/Profile.jsx\";\r\n\r\n\r\n//Set Config\r\n// let config = require('./config.json')\r\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk')\r\n\r\n\r\n// Start App\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.handleMicRecorderClick = this.handleMicRecorderClick.bind(this);\r\n      this.handleAudioRecordingSwitch = this.handleAudioRecordingSwitch.bind(this);\r\n\r\n      this.state = {\r\n        accessToken: null,\r\n        AudioRecordingEnabled: true,\r\n        isStreaming: false,\r\n        isHosted: false,\r\n        color: 'white',\r\n        value: '', \r\n        displayText: 'Transcribed text will show here when streaming.',\r\n        displayNLPOutput: 'This windows will display detected entities.',\r\n        debugConsole: 'Debug logs will be displayed here.'\r\n      };\r\n  }\r\n\r\n  async handleMicRecorderClick(accessToken) {\r\n\r\n    // event.preventDefault();\r\n\r\n    //flip toggle\r\n    if (this.state.isStreaming) {\r\n      this.setState({debugConsole : 'Stop Mic Event Received'})\r\n      await this.setState({isStreaming: false})\r\n      return null\r\n    } else {\r\n      await this.setState({isStreaming: true})\r\n    }\r\n    \r\n    const delay = ms => new Promise(res => setTimeout(res, ms));\r\n      const recognizer = await this.InitializeStream(accessToken);\r\n      await this.sttFromMic(recognizer, accessToken);\r\n      await delay(2000);\r\n      do {\r\n        this.setState({debugConsole : \"Mic is listening for audio.\"})\r\n        this.setState({debugConsole : \"Will check every 2 seconds for stop event\"})\r\n        await delay(2000);\r\n      }\r\n      while (this.state.isStreaming);\r\n      await this.stopMicStream(recognizer);\r\n    }\r\n\r\n\r\n  handleAudioRecordingSwitch = () => {\r\n\r\n    if (this.state.AudioRecordingEnabled) {\r\n      this.setState({AudioRecordingEnabled: false})\r\n    } else {\r\n      this.setState({AudioRecordingEnabled: true})\r\n    }\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n  }\r\n\r\n\r\nasync InitializeStream(accessToken) {\r\n    const tokenObj = await getTokenOrRefresh(accessToken);\r\n    const customSpeechEndpoint = tokenObj.endpoint_id\r\n    const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\r\n    if (this.state.AudioRecordingEnabled) {\r\n\r\n      //Setting below specifies custom speech model ID that is created using Speech Studio\r\n      speechConfig.endpointId = customSpeechEndpoint;\r\n\r\n      //Setting below allows specifying custom GUID that can be used to correlate audio captured by Speech Logging\r\n      speechConfig.setServiceProperty(\"clientConnectionId\", this.state.value, speechsdk.ServicePropertyChannel.UriQueryParameter);\r\n          \r\n    }\r\n    speechConfig.speechRecognitionLanguage = 'en-US';\r\n    const audioConfig = speechsdk.AudioConfig.fromDefaultMicrophoneInput();\r\n    const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n    return recognizer\r\n    \r\n  };\r\n\r\n  async stopMicStream(recognizer) {\r\n    await recognizer.stopContinuousRecognitionAsync();\r\n    await this.setState({isStreaming : false});\r\n    this.setState({debugConsole : 'Mic stopped listening'});\r\n  }\r\n\r\n\r\n  async sttFromMic(recognizer, accessToken) {\r\n\r\n    let resultText = \"\";\r\n    let nlpText = \" \";\r\n\r\n    recognizer.sessionStarted = (s, e) => {\r\n      resultText = \"Session ID: \" + e.sessionId;\r\n      this.setState({\r\n        displayText: resultText\r\n      });\r\n    };\r\n\r\n    recognizer.recognized = async (s, e) => {\r\n\r\n      if(e.result.reason === ResultReason.RecognizedSpeech){\r\n              //Display continuous transcript\r\n              resultText += `\\n${e.result.text}`;    \r\n              this.setState({\r\n                displayText: resultText\r\n              });      \r\n              \r\n              //Perform continuous NLP\r\n              const nlpObj = await getKeyPhrases(e.result.text, accessToken);              \r\n                  \r\n              //Display extracted Key Phrases      \r\n              const keyPhraseText = JSON.stringify(nlpObj.keyPhrasesExtracted);\r\n              \r\n              if(keyPhraseText.length > 15){\r\n                  nlpText += \"\\n\" + keyPhraseText;\r\n                  this.setState({ displayNLPOutput: nlpText }); \r\n              }        \r\n\r\n              //Display extracted entities\r\n              const entityText = JSON.stringify(nlpObj.entityExtracted); \r\n\r\n              if(entityText.length > 12){\r\n                  nlpText += \"\\n\" + entityText;\r\n                  this.setState({ displayNLPOutput: nlpText.replace('<br/>', '\\n') });\r\n              }          \r\n          }\r\n\r\n          else if (e.result.reason === ResultReason.NoMatch) {\r\n              //resultText += `\\nNo Match`\r\n              resultText += `\\n`\r\n          }          \r\n    };\r\n    await recognizer.startContinuousRecognitionAsync();\r\n    await this.setState({isStreaming : true});\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <PageLayout>\r\n        <AuthenticatedTemplate>\r\n          <OutputWindows profile={<ProfileContent processAccessToken={this.processAccessToken}/>} debugData={this.state.debugConsole} nlpOutput={this.state.displayNLPOutput} text={this.state.displayText} dashboard={<Dashboard isStreaming={this.state.isStreaming} AudioEnabled={this.state.AudioRecordingEnabled} onToggleClick={this.handleAudioRecordingSwitch} onMicRecordClick={this.handleMicRecorderClick}/>} />\r\n        </AuthenticatedTemplate>\r\n        <UnauthenticatedTemplate>\r\n          <OutputWindows profile={<ProfileContent/>} debugData={this.state.debugConsole} nlpOutput={this.state.displayNLPOutput} text={this.state.displayText} dashboard={<Dashboard isStreaming={this.state.isStreaming} AudioEnabled={this.state.AudioRecordingEnabled} onToggleClick={this.handleAudioRecordingSwitch} onMicRecordClick={this.handleMicRecorderClick}/>} />\r\n        </UnauthenticatedTemplate>\r\n      </PageLayout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\n// Create a theme instance.\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n});","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App.jsx\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { theme } from \"./styles/theme\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\n\r\n\r\n// MSAL Imports\r\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\n// MSAL configuration\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n// Default to using the first account if no account is active on page load\r\nif (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n  // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n  msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\r\n}\r\n\r\n// Optional - This will update account state if a user signs in from another tab or window\r\nmsalInstance.enableAccountStorageEvents();\r\n\r\nmsalInstance.addEventCallback((event) => {\r\n  if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\r\n    const account = event.payload.account;\r\n    msalInstance.setActiveAccount(account);\r\n  }\r\n});\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <ThemeProvider theme={theme}>\r\n        <MsalProvider instance={msalInstance}>\r\n        <App/>\r\n        </MsalProvider>\r\n      </ThemeProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}